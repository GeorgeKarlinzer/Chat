//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.9151
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using ChatData;
using System.ServiceModel;
using System.Text;

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName = "IService")]
public interface IService
{
    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/Login", ReplyAction = "http://tempuri.org/IService/LoginResponse")]
    User Login(string username, byte[] passwordHash);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/Register", ReplyAction = "http://tempuri.org/IService/RegisterResponse")]
    bool Register(string username, byte[] passwordHash, string name, byte[] image);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/SendMessage", ReplyAction = "http://tempuri.org/IService/SendMessageResponse")]
    void SendMessage(Message message);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/GetFriends", ReplyAction = "http://tempuri.org/IService/GetFriendsResponse")]
    User[] GetFriends(User user);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/GetMessages", ReplyAction = "http://tempuri.org/IService/GetMessagesResponse")]
    Message[] GetMessages(User user1, User user2);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/AddFriend", ReplyAction = "http://tempuri.org/IService/AddFriendResponse")]
    bool AddFriend(User user, string username);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IServiceChannel : IService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class ServiceClient : System.ServiceModel.ClientBase<IService>, IService
{
    public static ServiceClient GetConfiguredClient()
    {
        var endpointAddress = new EndpointAddress("net.tcp://localhost:8090/Service");

        var binding = new NetTcpBinding();
        binding.Name = "NetTcpBinding_IService";
        //binding.CloseTimeout = new System.TimeSpan(0, 1, 0);
        //binding.OpenTimeout = new System.TimeSpan(0, 1, 0);
        //binding.ReceiveTimeout = new System.TimeSpan(0, 1, 0);
        //binding.SendTimeout = new System.TimeSpan(0, 1, 0);
        //binding.AllowCookies = false;
        //binding.BypassProxyOnLocal = false;
        //binding.MaxBufferSize = 65536;
        //binding.MaxBufferPoolSize = 524288;
        //binding.MaxReceivedMessageSize = 65536;
        //binding.MessageEncoding = WSMessageEncoding.Text;
        //binding.TextEncoding = Encoding.UTF8;
        //binding.TransferMode = TransferMode.Buffered;
        //binding.UseDefaultWebProxy = true;
        //binding.ReaderQuotas.MaxDepth = 32;
        //binding.ReaderQuotas.MaxStringContentLength = 8192;
        //binding.ReaderQuotas.MaxArrayLength = 16384;
        //binding.Security.Mode = BasicHttpSecurityMode.None;
        //binding.Security.Transport.ClientCredentialType = HttpClientCredentialType.None;
        //binding.Security.Transport.ProxyCredentialType = HttpProxyCredentialType.None;
        //binding.Security.Message.ClientCredentialType = BasicHttpMessageCredentialType.UserName;

        return new ServiceClient(binding, endpointAddress);
    }

    public ServiceClient()
    {

    }

    public ServiceClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
    {
    }

    public ServiceClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
    {
    }

    public ServiceClient(string endpointConfigurationName, EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
    {
    }

    public ServiceClient(System.ServiceModel.Channels.Binding binding, EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
    {
    }

    public User Login(string username, byte[] passwordHash)
    {
        return base.Channel.Login(username, passwordHash);
    }

    public bool Register(string username, byte[] passwordHash, string name, byte[] image)
    {
        return base.Channel.Register(username, passwordHash, name, image);
    }

    public void SendMessage(Message message)
    {
        base.Channel.SendMessage(message);
    }

    public User[] GetFriends(User user)
    {
        return base.Channel.GetFriends(user);
    }

    public Message[] GetMessages(User user1, User user2)
    {
        return base.Channel.GetMessages(user1, user2);
    }

    public bool AddFriend(User user, string username)
    {
        return base.Channel.AddFriend(user, username);
    }
}
